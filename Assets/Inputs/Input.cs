//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Inputs/Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Tetris.Input
{
    public partial class @Input: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @Input()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input"",
    ""maps"": [
        {
            ""name"": ""Tetris"",
            ""id"": ""e6b1132c-d0f9-4ac3-888d-a77573dfe202"",
            ""actions"": [
                {
                    ""name"": ""Drop"",
                    ""type"": ""Button"",
                    ""id"": ""1a874f7e-91a1-498f-8438-0eb2dcd694d4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""2480a06d-66f6-44f5-b4f2-5d50ad2af1d7"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""ef18195f-3cbc-4c29-99b1-54ab5e475907"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""HardDrop"",
                    ""type"": ""Button"",
                    ""id"": ""9372b0c5-2a15-426d-bbb9-d1578736974e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hold"",
                    ""type"": ""Button"",
                    ""id"": ""ba6204e1-edb1-4824-adb1-af2870014bc5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""f567f2d6-d875-4ca4-b1c0-5e60598494ca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c6f90848-f6ee-44e5-baa2-7fe83dd03cfb"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""bc130f6b-d859-42fe-b718-035901eb803b"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""5242b390-0226-448c-b279-c835b6791dbb"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""b5ae5dcd-8d07-4731-87ed-ba324d82ab5b"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""af1961e1-6e4d-40bf-b157-f852398db1b2"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""a8c2a2da-4f8d-4881-9e88-cc6ac91dded3"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""ed00fae6-b4fc-4d88-bc55-d83112fbb425"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""58cfb88b-44f4-48ec-8877-4d8b214099f8"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HardDrop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""62e281cb-c18a-4301-89d9-e046544a2de6"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""468d01f0-e4d9-4653-9184-b22a55f3d0c0"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Tetris
            m_Tetris = asset.FindActionMap("Tetris", throwIfNotFound: true);
            m_Tetris_Drop = m_Tetris.FindAction("Drop", throwIfNotFound: true);
            m_Tetris_Move = m_Tetris.FindAction("Move", throwIfNotFound: true);
            m_Tetris_Rotate = m_Tetris.FindAction("Rotate", throwIfNotFound: true);
            m_Tetris_HardDrop = m_Tetris.FindAction("HardDrop", throwIfNotFound: true);
            m_Tetris_Hold = m_Tetris.FindAction("Hold", throwIfNotFound: true);
            m_Tetris_Reload = m_Tetris.FindAction("Reload", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Tetris
        private readonly InputActionMap m_Tetris;
        private List<ITetrisActions> m_TetrisActionsCallbackInterfaces = new List<ITetrisActions>();
        private readonly InputAction m_Tetris_Drop;
        private readonly InputAction m_Tetris_Move;
        private readonly InputAction m_Tetris_Rotate;
        private readonly InputAction m_Tetris_HardDrop;
        private readonly InputAction m_Tetris_Hold;
        private readonly InputAction m_Tetris_Reload;
        public struct TetrisActions
        {
            private @Input m_Wrapper;
            public TetrisActions(@Input wrapper) { m_Wrapper = wrapper; }
            public InputAction @Drop => m_Wrapper.m_Tetris_Drop;
            public InputAction @Move => m_Wrapper.m_Tetris_Move;
            public InputAction @Rotate => m_Wrapper.m_Tetris_Rotate;
            public InputAction @HardDrop => m_Wrapper.m_Tetris_HardDrop;
            public InputAction @Hold => m_Wrapper.m_Tetris_Hold;
            public InputAction @Reload => m_Wrapper.m_Tetris_Reload;
            public InputActionMap Get() { return m_Wrapper.m_Tetris; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(TetrisActions set) { return set.Get(); }
            public void AddCallbacks(ITetrisActions instance)
            {
                if (instance == null || m_Wrapper.m_TetrisActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_TetrisActionsCallbackInterfaces.Add(instance);
                @Drop.started += instance.OnDrop;
                @Drop.performed += instance.OnDrop;
                @Drop.canceled += instance.OnDrop;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
                @HardDrop.started += instance.OnHardDrop;
                @HardDrop.performed += instance.OnHardDrop;
                @HardDrop.canceled += instance.OnHardDrop;
                @Hold.started += instance.OnHold;
                @Hold.performed += instance.OnHold;
                @Hold.canceled += instance.OnHold;
                @Reload.started += instance.OnReload;
                @Reload.performed += instance.OnReload;
                @Reload.canceled += instance.OnReload;
            }

            private void UnregisterCallbacks(ITetrisActions instance)
            {
                @Drop.started -= instance.OnDrop;
                @Drop.performed -= instance.OnDrop;
                @Drop.canceled -= instance.OnDrop;
                @Move.started -= instance.OnMove;
                @Move.performed -= instance.OnMove;
                @Move.canceled -= instance.OnMove;
                @Rotate.started -= instance.OnRotate;
                @Rotate.performed -= instance.OnRotate;
                @Rotate.canceled -= instance.OnRotate;
                @HardDrop.started -= instance.OnHardDrop;
                @HardDrop.performed -= instance.OnHardDrop;
                @HardDrop.canceled -= instance.OnHardDrop;
                @Hold.started -= instance.OnHold;
                @Hold.performed -= instance.OnHold;
                @Hold.canceled -= instance.OnHold;
                @Reload.started -= instance.OnReload;
                @Reload.performed -= instance.OnReload;
                @Reload.canceled -= instance.OnReload;
            }

            public void RemoveCallbacks(ITetrisActions instance)
            {
                if (m_Wrapper.m_TetrisActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ITetrisActions instance)
            {
                foreach (var item in m_Wrapper.m_TetrisActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_TetrisActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public TetrisActions @Tetris => new TetrisActions(this);
        public interface ITetrisActions
        {
            void OnDrop(InputAction.CallbackContext context);
            void OnMove(InputAction.CallbackContext context);
            void OnRotate(InputAction.CallbackContext context);
            void OnHardDrop(InputAction.CallbackContext context);
            void OnHold(InputAction.CallbackContext context);
            void OnReload(InputAction.CallbackContext context);
        }
    }
}
